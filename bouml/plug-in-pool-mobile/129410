format 224
"util" // Android::Sdk::sources::android-36::java::util
  revision 1
  modified_by 2 "btssn2"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "Android/Sdk/sources/android-36/java/util/"
  java_package "java.util"
  classview 128642 "util"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 130178 "List"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Android-removed: removed link to collections framework docs

An ordered collection, where the user has precise control over where in the
list each element is inserted.  The user can access elements by their integer
index (position in the list), and search for elements in the list.<p>

Unlike sets, lists typically allow duplicate elements.  More formally,
lists typically allow pairs of elements {@code e1} and {@code e2}
such that {@code e1.equals(e2)}, and they typically allow multiple
null elements if they allow null elements at all.  It is not inconceivable
that someone might wish to implement a list that prohibits duplicates, by
throwing runtime exceptions when the user attempts to insert them, but we
expect this usage to be rare.<p>

The {@code List} interface places additional stipulations, beyond those
specified in the {@code Collection} interface, on the contracts of the
{@code iterator}, {@code add}, {@code remove}, {@code equals}, and
{@code hashCode} methods.  Declarations for other inherited methods are
also included here for convenience.<p>

The {@code List} interface provides four methods for positional (indexed)
access to list elements.  Lists (like Java arrays) are zero based.  Note
that these operations may execute in time proportional to the index value
for some implementations (the {@code LinkedList} class, for
example). Thus, iterating over the elements in a list is typically
preferable to indexing through it if the caller does not know the
implementation.<p>

The {@code List} interface provides a special iterator, called a
{@code ListIterator}, that allows element insertion and replacement, and
bidirectional access in addition to the normal operations that the
{@code Iterator} interface provides.  A method is provided to obtain a
list iterator that starts at a specified position in the list.<p>

The {@code List} interface provides two methods to search for a specified
object.  From a performance standpoint, these methods should be used with
caution.  In many implementations they will perform costly linear
searches.<p>

The {@code List} interface provides two methods to efficiently insert and
remove multiple elements at an arbitrary point in the list.<p>

Note: While it is permissible for lists to contain themselves as elements,
extreme caution is advised: the {@code equals} and {@code hashCode}
methods are no longer well defined on such a list.

<p>Some list implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
{@code NullPointerException} or {@code ClassCastException}.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the list may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface.

<h2><a id=\"unmodifiable\">Unmodifiable Lists</a></h2>
<p>The {@link List#of(Object...) List.of} and
{@link List#copyOf List.copyOf} static factory methods
provide a convenient way to create unmodifiable lists. The {@code List}
instances created by these methods have the following characteristics:

<ul>
<li>They are <a href=\"Collection.html#unmodifiable\"><i>unmodifiable</i></a>. Elements cannot
be added, removed, or replaced. Calling any mutator method on the List
will always cause {@code UnsupportedOperationException} to be thrown.
However, if the contained elements are themselves mutable,
this may cause the List's contents to appear to change.
<li>They disallow {@code null} elements. Attempts to create them with
{@code null} elements result in {@code NullPointerException}.
<li>They are serializable if all elements are serializable.
<li>The order of elements in the list is the same as the order of the
provided arguments, or of the elements in the provided array.
<li>The lists and their {@link #subList(int, int) subList} views implement the
{@link RandomAccess} interface.
<li>They are <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>.
Programmers should treat instances that are {@linkplain #equals(Object) equal}
as interchangeable and should not use them for synchronization, or
unpredictable behavior may occur. For example, in a future release,
synchronization may fail. Callers should make no assumptions about the
identity of the returned instances. Factories are free to
create new instances or reuse existing ones.
<li>They are serialized as specified on the
<a href=\"{@docRoot}/serialized-form.html#java.util.CollSer\">Serialized Form</a>
page.
</ul>

@param <E> the type of elements in this list

@author  Josh Bloch
@author  Neal Gafter
@see Collection
@see Set
@see ArrayList
@see LinkedList
@see Vector
@see Arrays#asList(Object[])
@see Collections#nCopies(int, Object)
@see Collections#EMPTY_LIST
@see AbstractList
@see AbstractSequentialList
@since 1.2
"
    end

    class 140930 "Set"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 143106 "Map"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 153602 "Queue"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 155650 "HashMap"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 166274 "ArrayList"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 130178 // List
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Resizable-array implementation of the {@code List} interface.  Implements
all optional list operations, and permits all elements, including
{@code null}.  In addition to implementing the {@code List} interface,
this class provides methods to manipulate the size of the array that is
used internally to store the list.  (This class is roughly equivalent to
{@code Vector}, except that it is unsynchronized.)

<p>The {@code size}, {@code isEmpty}, {@code get}, {@code set},
{@code iterator}, and {@code listIterator} operations run in constant
time.  The {@code add} operation runs in <i>amortized constant time</i>,
that is, adding n elements requires O(n) time.  All of the other operations
run in linear time (roughly speaking).  The constant factor is low compared
to that for the {@code LinkedList} implementation.

<p>Each {@code ArrayList} instance has a <i>capacity</i>.  The capacity is
the size of the array used to store the elements in the list.  It is always
at least as large as the list size.  As elements are added to an ArrayList,
its capacity grows automatically.  The details of the growth policy are not
specified beyond the fact that adding an element has constant amortized
time cost.

<p>An application can increase the capacity of an {@code ArrayList} instance
before adding a large number of elements using the {@code ensureCapacity}
operation.  This may reduce the amount of incremental reallocation.

<p><strong>Note that this implementation is not synchronized.</strong>
If multiple threads access an {@code ArrayList} instance concurrently,
and at least one of the threads modifies the list structurally, it
<i>must</i> be synchronized externally.  (A structural modification is
any operation that adds or deletes one or more elements, or explicitly
resizes the backing array; merely setting the value of an element is not
a structural modification.)  This is typically accomplished by
synchronizing on some object that naturally encapsulates the list.

If no such object exists, the list should be \"wrapped\" using the
{@link Collections#synchronizedList Collections.synchronizedList}
method.  This is best done at creation time, to prevent accidental
unsynchronized access to the list:<pre>
  List list = Collections.synchronizedList(new ArrayList(...));</pre>

<p id=\"fail-fast\">
The iterators returned by this class's {@link #iterator() iterator} and
{@link #listIterator(int) listIterator} methods are <em>fail-fast</em>:
if the list is structurally modified at any time after the iterator is
created, in any way except through the iterator's own
{@link ListIterator#remove() remove} or
{@link ListIterator#add(Object) add} methods, the iterator will throw a
{@link ConcurrentModificationException}.  Thus, in the face of
concurrent modification, the iterator fails quickly and cleanly, rather
than risking arbitrary, non-deterministic behavior at an undetermined
time in the future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw {@code ConcurrentModificationException} on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:  <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i>

<p>This class is a member of the
<a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">
Java Collections Framework</a>.

@param <E> the type of elements in this list

@author  Josh Bloch
@author  Neal Gafter
@see     Collection
@see     List
@see     LinkedList
@see     Vector
@since   1.2

 Android-changed: CME in iterators;

- AOSP commit b10b2a3ab693cfd6156d06ffe4e00ce69b9c9194
  Fix ConcurrentModificationException in ArrayList iterators.
"
      classrelation 228866 // <realization>
	relation 228866 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 228866 // <realization>
	  b parent class_ref 130178 // List
      end

      classrelation 229250 // <realization>
	relation 229250 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 229250 // <realization>
	  b parent class_ref 186882 // Serializable
      end

      attribute 320898 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8683452581122892189L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@java.io.Serial
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 321026 "DEFAULT_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Default initial capacity.

"
      end

      classrelation 229378 // EMPTY_ELEMENTDATA (<unidirectional association>)
	relation 229378 --->
	  a role_name "EMPTY_ELEMENTDATA" multiplicity "[]" init_value " {}" class_relation const_relation private
	    comment "
Shared empty array instance used for empty instances.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 229378 // EMPTY_ELEMENTDATA (<unidirectional association>)
	  b parent class_ref 128258 // Object
      end

      classrelation 229506 // DEFAULTCAPACITY_EMPTY_ELEMENTDATA (<unidirectional association>)
	relation 229506 --->
	  a role_name "DEFAULTCAPACITY_EMPTY_ELEMENTDATA" multiplicity "[]" init_value " {}" class_relation const_relation private
	    comment "
Shared empty array instance used for default sized empty instances. We
distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when
first element is added.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 229506 // DEFAULTCAPACITY_EMPTY_ELEMENTDATA (<unidirectional association>)
	  b parent class_ref 128258 // Object
      end

      classrelation 229634 // elementData (<unidirectional association>)
	relation 229634 --->
	  a role_name "elementData" multiplicity "[]" package
	    comment "
The array buffer into which the elements of the ArrayList are stored.
The capacity of the ArrayList is the length of this array buffer. Any
empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA
will be expanded to DEFAULT_CAPACITY when the first element is added.

 Android-note: Also accessed from java.util.Collections
 non-private to simplify nested class access"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 229634 // elementData (<unidirectional association>)
	  b parent class_ref 128258 // Object
      end

      attribute 321154 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The size of the ArrayList (the number of elements it contains).

@serial

"
      end

      operation 539394 "ArrayList"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty list with the specified initial capacity.

@param  initialCapacity  the initial capacity of the list
@throws IllegalArgumentException if the specified initial capacity
        is negative
"
      end

      operation 539522 "ArrayList"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty list with an initial capacity of ten.
"
      end

      operation 539650 "ArrayList"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "c" explicit_type "Collection"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a list containing the elements of the specified
collection, in the order they are returned by the collection's
iterator.

@param c the collection whose elements are to be placed into this list
@throws NullPointerException if the specified collection is null
"
      end

      operation 539778 "trimToSize"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Trims the capacity of this {@code ArrayList} instance to be the
list's current size.  An application can use this operation to minimize
the storage of an {@code ArrayList} instance.
"
      end

      operation 539906 "ensureCapacity"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity of this {@code ArrayList} instance, if
necessary, to ensure that it can hold at least the number of elements
specified by the minimum capacity argument.

@param minCapacity the desired minimum capacity
"
      end

      operation 540034 "grow"
	cpp_inline private return_type class_ref 128258 // Object
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity to ensure that it can hold at least the
number of elements specified by the minimum capacity argument.

@param minCapacity the desired minimum capacity
@throws OutOfMemoryError if minCapacity is less than zero
"
      end

      operation 540162 "grow"
	cpp_inline private return_type class_ref 128258 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 540290 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this list.

@return the number of elements in this list
"
      end

      operation 540418 "isEmpty"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this list contains no elements.

@return {@code true} if this list contains no elements
"
      end

      operation 540546 "contains"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 128258 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this list contains the specified element.
More formally, returns {@code true} if and only if this list contains
at least one element {@code e} such that
{@code Objects.equals(o, e)}.

@param o element whose presence in this list is to be tested
@return {@code true} if this list contains the specified element
"
      end

      operation 540674 "indexOf"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 128258 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first occurrence of the specified element
in this list, or -1 if this list does not contain the element.
More formally, returns the lowest index {@code i} such that
{@code Objects.equals(o, get(i))},
or -1 if there is no such index.
"
      end

      operation 540802 "indexOfRange"
	cpp_inline package explicit_return_type "int"
	nparams 3
	  param inout name "o" type class_ref 128258 // Object
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 540930 "lastIndexOf"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 128258 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last occurrence of the specified element
in this list, or -1 if this list does not contain the element.
More formally, returns the highest index {@code i} such that
{@code Objects.equals(o, get(i))},
or -1 if there is no such index.
"
      end

      operation 541058 "lastIndexOfRange"
	cpp_inline package explicit_return_type "int"
	nparams 3
	  param inout name "o" type class_ref 128258 // Object
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 541186 "clone"
	cpp_inline public return_type class_ref 128258 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this {@code ArrayList} instance.  (The
elements themselves are not copied.)

@return a clone of this {@code ArrayList} instance
"
      end

      operation 541314 "toArray"
	cpp_inline public return_type class_ref 128258 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list
in proper sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this list.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this list in
        proper sequence
"
      end

      operation 541442 "toArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this list in proper
sequence (from first to last element); the runtime type of the returned
array is that of the specified array.  If the list fits in the
specified array, it is returned therein.  Otherwise, a new array is
allocated with the runtime type of the specified array and the size of
this list.

<p>If the list fits in the specified array with room to spare
(i.e., the array has more elements than the list), the element in
the array immediately following the end of the collection is set to
{@code null}.  (This is useful in determining the length of the
list <i>only</i> if the caller knows that the list does not contain
any null elements.)

@param a the array into which the elements of the list are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose.
@return an array containing the elements of the list
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this list
@throws NullPointerException if the specified array is null
"
      end

      operation 541570 "elementData"
	cpp_inline package explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " Positional Access Operations"
      end

      operation 541698 "elementAt"
	class_operation cpp_inline package explicit_return_type "E"
	nparams 2
	  param inout name "es" type class_ref 128258 // Object
	multiplicity "[]"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 541826 "get"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element at the specified position in this list.

@param  index index of the element to return
@return the element at the specified position in this list
@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 541954 "getFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NoSuchElementException {@inheritDoc}
@since 21
"
      end

      operation 542082 "getLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NoSuchElementException {@inheritDoc}
@since 21
"
      end

      operation 542210 "set"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with
the specified element.

@param index index of the element to replace
@param element element to be stored at the specified position
@return the element previously at the specified position
@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 542338 "add"
	cpp_inline private explicit_return_type "void"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param inout name "elementData" type class_ref 128258 // Object
	multiplicity "[]"
	  param in name "s" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This helper method split out from add(E) to keep method
bytecode size under 35 (the -XX:MaxInlineSize default value),
which helps when add(E) is called in a C1-compiled loop.
"
      end

      operation 542466 "add"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this list.

@param e element to be appended to this list
@return {@code true} (as specified by {@link Collection#add})
"
      end

      operation 542594 "add"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this
list. Shifts the element currently at that position (if any) and
any subsequent elements to the right (adds one to their indices).

@param index index at which the specified element is to be inserted
@param element element to be inserted
@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 542722 "addFirst"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@since 21
"
      end

      operation 542850 "addLast"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@since 21
"
      end

      operation 542978 "remove"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list.
Shifts any subsequent elements to the left (subtracts one from their
indices).

@param index the index of the element to be removed
@return the element that was removed from the list
@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 543106 "removeFirst"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NoSuchElementException {@inheritDoc}
@since 21
"
      end

      operation 543234 "removeLast"
	cpp_inline public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NoSuchElementException {@inheritDoc}
@since 21
"
      end

      operation 543362 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 128258 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 543490 "equalsRange"
	cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "other" type class_ref 130178 // List
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 543618 "equalsArrayList"
	cpp_inline private explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 166274 // ArrayList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 543746 "checkForComodification"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "expectedModCount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 543874 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 544002 "hashCodeRange"
	cpp_inline package explicit_return_type "int"
	nparams 2
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 544130 "remove"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 128258 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this list,
if it is present.  If the list does not contain the element, it is
unchanged.  More formally, removes the element with the lowest index
{@code i} such that
{@code Objects.equals(o, get(i))}
(if such an element exists).  Returns {@code true} if this list
contained the specified element (or equivalently, if this list
changed as a result of the call).

@param o element to be removed from this list, if present
@return {@code true} if this list contained the specified element
"
      end

      operation 544258 "fastRemove"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "es" type class_ref 128258 // Object
	multiplicity "[]"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private remove method that skips bounds checking and does not
return the value removed.
"
      end

      operation 544386 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list.  The list will
be empty after this call returns.
"
      end

      operation 544514 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" explicit_type "Collection"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this list, in the order that they are returned by the
specified collection's Iterator.  The behavior of this operation is
undefined if the specified collection is modified while the operation
is in progress.  (This implies that the behavior of this call is
undefined if the specified collection is this list, and this
list is nonempty.)

@param c collection containing elements to be added to this list
@return {@code true} if this list changed as a result of the call
@throws NullPointerException if the specified collection is null
"
      end

      operation 544642 "addAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" explicit_type "Collection"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified collection into this
list, starting at the specified position.  Shifts the element
currently at that position (if any) and any subsequent elements to
the right (increases their indices).  The new elements will appear
in the list in the order that they are returned by the
specified collection's iterator.

@param index index at which to insert the first element from the
             specified collection
@param c collection containing elements to be added to this list
@return {@code true} if this list changed as a result of the call
@throws IndexOutOfBoundsException {@inheritDoc}
@throws NullPointerException if the specified collection is null
"
      end

      operation 544770 "removeRange"
	cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all of the elements whose index is between
{@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
Shifts any succeeding elements to the left (reduces their index).
This call shortens the list by {@code (toIndex - fromIndex)} elements.
(If {@code toIndex==fromIndex}, this operation has no effect.)

@throws IndexOutOfBoundsException if {@code fromIndex} or
        {@code toIndex} is out of range
        ({@code fromIndex < 0 ||
         toIndex > size() ||
         toIndex < fromIndex})
"
      end

      operation 544898 "shiftTailOverGap"
	cpp_inline private explicit_return_type "void"
	nparams 3
	  param inout name "es" type class_ref 128258 // Object
	multiplicity "[]"
	  param in name "lo" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Erases the gap from lo to hi, by sliding down following elements. "
      end

      operation 545026 "rangeCheckForAdd"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A version of rangeCheck used by add and addAll.
"
      end

      operation 545154 "outOfBoundsMsg"
	cpp_inline private return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an IndexOutOfBoundsException detail message.
Of the many possible refactorings of the error handling code,
this \"outlining\" performs best with both server and client VMs.
"
      end

      operation 545282 "outOfBoundsMsg"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A version used in checking (fromIndex > toIndex) condition
"
      end

      operation 545410 "removeAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" explicit_type "Collection"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all of its elements that are contained in the
specified collection.

@param c collection containing elements to be removed from this list
@return {@code true} if this list changed as a result of the call
@throws ClassCastException if the class of an element of this list
        is incompatible with the specified collection
(<a href=\"Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if this list contains a null element and the
        specified collection does not permit null elements
(<a href=\"Collection.html#optional-restrictions\">optional</a>),
        or if the specified collection is null
@see Collection#contains(Object)
"
      end

      operation 545538 "retainAll"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" explicit_type "Collection"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this list that are contained in the
specified collection.  In other words, removes from this list all
of its elements that are not contained in the specified collection.

@param c collection containing elements to be retained in this list
@return {@code true} if this list changed as a result of the call
@throws ClassCastException if the class of an element of this list
        is incompatible with the specified collection
(<a href=\"Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if this list contains a null element and the
        specified collection does not permit null elements
(<a href=\"Collection.html#optional-restrictions\">optional</a>),
        or if the specified collection is null
@see Collection#contains(Object)
"
      end

      operation 545666 "batchRemove"
	cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "c" explicit_type "Collection"
	  param inout name "complement" explicit_type "boolean"
	  param in name "from" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 545794 "writeObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 187010 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 135810 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@java.io.Serial
"
	
	
	
	comment "Saves the state of the {@code ArrayList} instance to a stream
(that is, serializes it).

@param s the stream
@throws java.io.IOException if an I/O error occurs
@serialData The length of the array backing the {@code ArrayList}
            instance is emitted (int), followed by all of its elements
            (each an {@code Object}) in the proper order.
"
      end

      operation 545922 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 187138 // ObjectInputStream
	nexceptions 2
	  exception class_ref 135810 // IOException
	  exception class_ref 156674 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@java.io.Serial
"
	
	
	
	comment "Reconstitutes the {@code ArrayList} instance from a stream (that is,
deserializes it).
@param s the stream
@throws ClassNotFoundException if the class of a serialized object
        could not be found
@throws java.io.IOException if an I/O error occurs
"
      end

      operation 546050 "listIterator"
	cpp_inline public explicit_return_type "ListIterator"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list iterator over the elements in this list (in proper
sequence), starting at the specified position in the list.
The specified index indicates the first element that would be
returned by an initial call to {@link ListIterator#next next}.
An initial call to {@link ListIterator#previous previous} would
return the element with the specified index minus one.

<p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.

@throws IndexOutOfBoundsException {@inheritDoc}
"
      end

      operation 546178 "listIterator"
	cpp_inline public explicit_return_type "ListIterator"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list iterator over the elements in this list (in proper
sequence).

<p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.

@see #listIterator(int)
"
      end

      operation 546306 "iterator"
	cpp_inline public explicit_return_type "Iterator"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this list in proper sequence.

<p>The returned iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.

@return an iterator over the elements in this list in proper sequence
"
      end
    end

    class 181762 "HashSet"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 184706 "Comparator"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 206978 "LinkedHashMap"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 294402 "Locale"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end
  end

  package_ref 129794 // concurrent

  package_ref 131330 // function

  package_ref 135554 // stream

  deploymentview 129666 "util"
    //deployment diagram settings
    deploymentdiagramsettings
     end
  end
end
