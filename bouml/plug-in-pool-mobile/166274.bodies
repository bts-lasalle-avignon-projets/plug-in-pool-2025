class ArrayList
!!!539394.java!!!	ArrayList(in initialCapacity : int)
        if (initialCapacity > 0) {
            this.elementData = new Object[initialCapacity];
        } else if (initialCapacity == 0) {
            this.elementData = EMPTY_ELEMENTDATA;
        } else {
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        }
!!!539522.java!!!	ArrayList()
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
!!!539650.java!!!	ArrayList(inout c : Collection)
        Object[] a = c.toArray();
        if ((size = a.length) != 0) {
            if (c.getClass() == ArrayList.class) {
                elementData = a;
            } else {
                elementData = Arrays.copyOf(a, size, Object[].class);
            }
        } else {
            // replace with empty array.
            elementData = EMPTY_ELEMENTDATA;
        }
!!!539778.java!!!	trimToSize() : void
        modCount++;
        if (size < elementData.length) {
            elementData = (size == 0)
              ? EMPTY_ELEMENTDATA
              : Arrays.copyOf(elementData, size);
        }
!!!539906.java!!!	ensureCapacity(in minCapacity : int) : void
        if (minCapacity > elementData.length
            && !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA
                 && minCapacity <= DEFAULT_CAPACITY)) {
            modCount++;
            grow(minCapacity);
        }
!!!540034.java!!!	grow(in minCapacity : int) : Object
        int oldCapacity = elementData.length;
        if (oldCapacity > 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            int newCapacity = ArraysSupport.newLength(oldCapacity,
                    minCapacity - oldCapacity, /* minimum growth */
                    oldCapacity >> 1           /* preferred growth */);
            return elementData = Arrays.copyOf(elementData, newCapacity);
        } else {
            return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];
        }
!!!540162.java!!!	grow() : Object
        return grow(size + 1);
!!!540290.java!!!	size() : int
        return size;
!!!540418.java!!!	isEmpty() : boolean
        return size == 0;
!!!540546.java!!!	contains(inout o : Object) : boolean
        return indexOf(o) >= 0;
!!!540674.java!!!	indexOf(inout o : Object) : int
        return indexOfRange(o, 0, size);
!!!540802.java!!!	indexOfRange(inout o : Object, in start : int, in end : int) : int
        Object[] es = elementData;
        if (o == null) {
            for (int i = start; i < end; i++) {
                if (es[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = start; i < end; i++) {
                if (o.equals(es[i])) {
                    return i;
                }
            }
        }
        return -1;
!!!540930.java!!!	lastIndexOf(inout o : Object) : int
        return lastIndexOfRange(o, 0, size);
!!!541058.java!!!	lastIndexOfRange(inout o : Object, in start : int, in end : int) : int
        Object[] es = elementData;
        if (o == null) {
            for (int i = end - 1; i >= start; i--) {
                if (es[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = end - 1; i >= start; i--) {
                if (o.equals(es[i])) {
                    return i;
                }
            }
        }
        return -1;
!!!541186.java!!!	clone() : Object
        try {
            ArrayList<?> v = (ArrayList<?>) super.clone();
            v.elementData = Arrays.copyOf(elementData, size);
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
!!!541314.java!!!	toArray() : Object
        return Arrays.copyOf(elementData, size);
!!!541442.java!!!	toArray(inout a : T [[]]) : T
        if (a.length < size)
            // Make a new array of a's runtime type, but my contents:
            return (T[]) Arrays.copyOf(elementData, size, a.getClass());
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size)
            a[size] = null;
        return a;
!!!541570.java!!!	elementData(in index : int) : E
        return (E) elementData[index];
!!!541698.java!!!	elementAt(inout es : Object [[]], in index : int) : E
        return (E) es[index];
!!!541826.java!!!	get(in index : int) : E
        Objects.checkIndex(index, size);
        return elementData(index);
!!!541954.java!!!	getFirst() : E
        if (size == 0) {
            throw new NoSuchElementException();
        } else {
            return elementData(0);
        }
!!!542082.java!!!	getLast() : E
        int last = size - 1;
        if (last < 0) {
            throw new NoSuchElementException();
        } else {
            return elementData(last);
        }
!!!542210.java!!!	set(in index : int, inout element : E) : E
        Objects.checkIndex(index, size);
        E oldValue = elementData(index);
        elementData[index] = element;
        return oldValue;
!!!542338.java!!!	add(inout e : E, inout elementData : Object [[]], in s : int) : void
        if (s == elementData.length)
            elementData = grow();
        elementData[s] = e;
        size = s + 1;
!!!542466.java!!!	add(inout e : E) : boolean
        modCount++;
        add(e, elementData, size);
        return true;
!!!542594.java!!!	add(in index : int, inout element : E) : void
        rangeCheckForAdd(index);
        modCount++;
        final int s;
        Object[] elementData;
        if ((s = size) == (elementData = this.elementData).length)
            elementData = grow();
        System.arraycopy(elementData, index,
                         elementData, index + 1,
                         s - index);
        elementData[index] = element;
        size = s + 1;
!!!542722.java!!!	addFirst(inout element : E) : void
        add(0, element);
!!!542850.java!!!	addLast(inout element : E) : void
        add(element);
!!!542978.java!!!	remove(in index : int) : E
        Objects.checkIndex(index, size);
        final Object[] es = elementData;

        @SuppressWarnings("unchecked") E oldValue = (E) es[index];
        fastRemove(es, index);

        return oldValue;
!!!543106.java!!!	removeFirst() : E
        if (size == 0) {
            throw new NoSuchElementException();
        } else {
            Object[] es = elementData;
            @SuppressWarnings("unchecked") E oldValue = (E) es[0];
            fastRemove(es, 0);
            return oldValue;
        }
!!!543234.java!!!	removeLast() : E
        int last = size - 1;
        if (last < 0) {
            throw new NoSuchElementException();
        } else {
            Object[] es = elementData;
            @SuppressWarnings("unchecked") E oldValue = (E) es[last];
            fastRemove(es, last);
            return oldValue;
        }
!!!543362.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (!(o instanceof List)) {
            return false;
        }

        final int expectedModCount = modCount;
        // ArrayList can be subclassed and given arbitrary behavior, but we can
        // still deal with the common case where o is ArrayList precisely
        boolean equal = (o.getClass() == ArrayList.class)
            ? equalsArrayList((ArrayList<?>) o)
            : equalsRange((List<?>) o, 0, size);

        checkForComodification(expectedModCount);
        return equal;
!!!543490.java!!!	equalsRange(inout other : List, in from : int, in to : int) : boolean
        final Object[] es = elementData;
        if (to > es.length) {
            throw new ConcurrentModificationException();
        }
        var oit = other.iterator();
        for (; from < to; from++) {
            if (!oit.hasNext() || !Objects.equals(es[from], oit.next())) {
                return false;
            }
        }
        return !oit.hasNext();
!!!543618.java!!!	equalsArrayList(inout other : ArrayList) : boolean
        final int otherModCount = other.modCount;
        final int s = size;
        boolean equal;
        if (equal = (s == other.size)) {
            final Object[] otherEs = other.elementData;
            final Object[] es = elementData;
            if (s > es.length || s > otherEs.length) {
                throw new ConcurrentModificationException();
            }
            for (int i = 0; i < s; i++) {
                if (!Objects.equals(es[i], otherEs[i])) {
                    equal = false;
                    break;
                }
            }
        }
        other.checkForComodification(otherModCount);
        return equal;
!!!543746.java!!!	checkForComodification(in expectedModCount : int) : void
        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
!!!543874.java!!!	hashCode() : int
        int expectedModCount = modCount;
        int hash = hashCodeRange(0, size);
        checkForComodification(expectedModCount);
        return hash;
!!!544002.java!!!	hashCodeRange(in from : int, in to : int) : int
        final Object[] es = elementData;
        if (to > es.length) {
            throw new ConcurrentModificationException();
        }
        int hashCode = 1;
        for (int i = from; i < to; i++) {
            Object e = es[i];
            hashCode = 31 * hashCode + (e == null ? 0 : e.hashCode());
        }
        return hashCode;
!!!544130.java!!!	remove(inout o : Object) : boolean
        final Object[] es = elementData;
        final int size = this.size;
        int i = 0;
        found: {
            if (o == null) {
                for (; i < size; i++)
                    if (es[i] == null)
                        break found;
            } else {
                for (; i < size; i++)
                    if (o.equals(es[i]))
                        break found;
            }
            return false;
        }
        fastRemove(es, i);
        return true;
!!!544258.java!!!	fastRemove(inout es : Object [[]], in i : int) : void
        modCount++;
        final int newSize;
        if ((newSize = size - 1) > i)
            System.arraycopy(es, i + 1, es, i, newSize - i);
        es[size = newSize] = null;
!!!544386.java!!!	clear() : void
        modCount++;
        final Object[] es = elementData;
        for (int to = size, i = size = 0; i < to; i++)
            es[i] = null;
!!!544514.java!!!	addAll(inout c : Collection) : boolean
        Object[] a = c.toArray();
        modCount++;
        int numNew = a.length;
        if (numNew == 0)
            return false;
        Object[] elementData;
        final int s;
        if (numNew > (elementData = this.elementData).length - (s = size))
            elementData = grow(s + numNew);
        System.arraycopy(a, 0, elementData, s, numNew);
        size = s + numNew;
        return true;
!!!544642.java!!!	addAll(in index : int, inout c : Collection) : boolean
        rangeCheckForAdd(index);

        Object[] a = c.toArray();
        modCount++;
        int numNew = a.length;
        if (numNew == 0)
            return false;
        Object[] elementData;
        final int s;
        if (numNew > (elementData = this.elementData).length - (s = size))
            elementData = grow(s + numNew);

        int numMoved = s - index;
        if (numMoved > 0)
            System.arraycopy(elementData, index,
                             elementData, index + numNew,
                             numMoved);
        System.arraycopy(a, 0, elementData, index, numNew);
        size = s + numNew;
        return true;
!!!544770.java!!!	removeRange(in fromIndex : int, in toIndex : int) : void
        if (fromIndex > toIndex) {
            throw new IndexOutOfBoundsException(
                    outOfBoundsMsg(fromIndex, toIndex));
        }
        modCount++;
        shiftTailOverGap(elementData, fromIndex, toIndex);
!!!544898.java!!!	shiftTailOverGap(inout es : Object [[]], in lo : int, in hi : int) : void
        System.arraycopy(es, hi, es, lo, size - hi);
        for (int to = size, i = (size -= hi - lo); i < to; i++)
            es[i] = null;
!!!545026.java!!!	rangeCheckForAdd(in index : int) : void
        if (index > size || index < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!545154.java!!!	outOfBoundsMsg(in index : int) : String
        return "Index: "+index+", Size: "+size;
!!!545282.java!!!	outOfBoundsMsg(in fromIndex : int, in toIndex : int) : String
        return "From Index: " + fromIndex + " > To Index: " + toIndex;
!!!545410.java!!!	removeAll(inout c : Collection) : boolean
        return batchRemove(c, false, 0, size);
!!!545538.java!!!	retainAll(inout c : Collection) : boolean
        return batchRemove(c, true, 0, size);
!!!545666.java!!!	batchRemove(inout c : Collection, inout complement : boolean, in from : int, in end : int) : boolean
        Objects.requireNonNull(c);
        final Object[] es = elementData;
        int r;
        // Optimize for initial run of survivors
        for (r = from;; r++) {
            if (r == end)
                return false;
            if (c.contains(es[r]) != complement)
                break;
        }
        int w = r++;
        try {
            for (Object e; r < end; r++)
                if (c.contains(e = es[r]) == complement)
                    es[w++] = e;
        } catch (Throwable ex) {
            // Preserve behavioral compatibility with AbstractCollection,
            // even if c.contains() throws.
            System.arraycopy(es, r, es, w, end - r);
            w += end - r;
            throw ex;
        } finally {
            modCount += end - w;
            shiftTailOverGap(es, w, end);
        }
        return true;
!!!545794.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Write out element count, and any hidden stuff
        int expectedModCount = modCount;
        s.defaultWriteObject();

        // Write out size as capacity for behavioral compatibility with clone()
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (int i=0; i<size; i++) {
            s.writeObject(elementData[i]);
        }

        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
!!!545922.java!!!	readObject(inout s : ObjectInputStream) : void

        // Read in size, and any hidden stuff
        s.defaultReadObject();

        // Read in capacity
        s.readInt(); // ignored

        if (size > 0) {
            // like clone(), allocate array based upon size not capacity
            SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Object[].class, size);
            Object[] elements = new Object[size];

            // Read in all elements in the proper order.
            for (int i = 0; i < size; i++) {
                elements[i] = s.readObject();
            }

            elementData = elements;
        } else if (size == 0) {
            elementData = EMPTY_ELEMENTDATA;
        } else {
            throw new java.io.InvalidObjectException("Invalid size: " + size);
        }
!!!546050.java!!!	listIterator(in index : int) : ListIterator
        rangeCheckForAdd(index);
        return new ListItr(index);
!!!546178.java!!!	listIterator() : ListIterator
        return new ListItr(0);
!!!546306.java!!!	iterator() : Iterator
        return new Itr();
