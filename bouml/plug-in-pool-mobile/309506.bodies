class CommunicationBluetooth
!!!1261570.java!!!	CommunicationBluetooth(inout peripherique : BluetoothDevice)
        this.peripherique = peripherique;
!!!1261698.java!!!	run() : void
        try
        {
            socket = peripherique.createRfcommSocketToServiceRecord(SERIAL_UUID);
            socket.connect();
            outputStream = socket.getOutputStream();
            inputStream  = socket.getInputStream();

            Log.d(TAG, "Connexion Bluetooth réussie");

            new Thread(this::ecouterReception).start();
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la connexion Bluetooth", e);
        }
!!!1261826.java!!!	envoyerTrameAsync(inout trame : String) : void
        executor.execute(() -> {
            try
            {
                if(outputStream != null)
                {
                    outputStream.write(trame.getBytes());
                    outputStream.flush();
                    Log.d(TAG, "Trame envoyée : " + trame);
                }
                else
                {
                    Log.e(TAG, "OutputStream nul, trame non envoyée");
                }
            }
            catch(IOException e)
            {
                Log.e(TAG, "Erreur lors de l'envoi de la trame", e);
            }
        });
!!!1261954.java!!!	ecouterReception() : void
        byte[] buffer = new byte[1024];
        int bytes;

        while(socket != null && socket.isConnected())
        {
            try
            {
                bytes = inputStream.read(buffer);

                if(bytes == -1)
                {
                    Log.e(TAG, "Connexion Bluetooth fermée (read = -1)");
                    break;
                }

                String messageRecu = new String(buffer, 0, bytes);

                Log.d(TAG, "Message reçu : " + messageRecu);

                if(estTrameValide(messageRecu))
                {
                    if(receptionListener != null)
                    {
                        receptionListener.onMessageRecu(messageRecu);
                    }
                }
                else
                {
                    Log.e(TAG, "Trame invalide reçue");
                }
            }
            catch(IOException e)
            {
                Log.e(TAG, "Erreur de réception", e);
                break;
            }
        }
        try
        {
            if(inputStream != null)
                inputStream.close();
            if(socket != null)
                socket.close();
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la fermeture du socket", e);
        }
!!!1262082.java!!!	estConnecte() : boolean
        return socket != null && socket.isConnected();
!!!1262210.java!!!	estTrameValide(inout trame : String) : boolean
        if(trame == null)
        {
            return false;
        }
        trame = trame.trim();

        if(!trame.startsWith(ENTETE) || !trame.endsWith(DELIMITATEUR_FIN))
        {
            return false;
        }

        String contenu    = trame.substring(1, trame.length() - 1);
        String[] morceaux = contenu.split(SEPARATEUR);

        if(morceaux.length != 2)
        {
            return false;
        }

        try
        {
            Integer.parseInt(morceaux[0]);
            Integer.parseInt(morceaux[1]);
            return true;
        }
        catch(NumberFormatException e)
        {
            return false;
        }
!!!1262466.java!!!	setReceptionListener(inout listener : CommunicationBluetooth::ReceptionListener) : void
        this.receptionListener = listener;
!!!1262594.java!!!	close() : void
        executor.shutdownNow();
        try
        {
            if(inputStream != null)
                inputStream.close();
            if(outputStream != null)
                outputStream.close();
            if(socket != null && socket.isConnected())
                socket.close();
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la fermeture de la connexion", e);
        }
